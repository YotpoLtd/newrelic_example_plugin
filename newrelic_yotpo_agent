#! /usr/bin/env ruby

#
# This is an example agent which generates synthetic data.
# A 1mHz (one cycle every 16 minutes) sin+1, cos+1 and sin+5 wave is generated,
# using the Unix epoch as the base.
#

require "rubygems"
require "bundler/setup"

require "newrelic_plugin"
require "redis"
require "redis-store"
require 'redis-activesupport'
require 'hiredis'
require 'resque'
require 'resque-cleaner'
require 'resque_scheduler'
require 'resque_scheduler/server'


module ExampleAgent

  REDIS_CONF = YAML.load_file("config/redis_conf.yml")['production']
  $redis = Resque.redis = Redis::Sentinel.new(REDIS_CONF['SENTINEL_HOSTS'].map {|host| {:host => host, :port => REDIS_CONF['SENTINEL_PORT']}}, :master_name => REDIS_CONF['SENTINEL_CLUSTER_NAME'], :db => REDIS_CONF['REDIS_RESQUE_DB'], :reconnect_wait => REDIS_CONF['RECONNECT_WAIT'], :failover_timeout => REDIS_CONF['FAILOVER_TIMEOUT'])
  Resque.redis = $redis

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "com.yotpo.AsyncServers"
    agent_version "1.0.1"
    agent_config_options :hertz  # frequency of the periodic functions
    agent_human_labels("Resque Agent") { "Async Common" }

    def poll_cycle
      hostname = Socket.gethostbyname(Socket.gethostname).first
      info = Resque.info;
      report_metric "Workers/Total", "Workers", Resque.workers.count.to_f
      report_metric "Workers/Working", "Workers", Resque.working.count.to_f
      report_metric "Alerts/SchedulerDown" , "Active", ((`ps aux | grep resque-sched | grep -v grep` == "") ? 1.0 : 0.0)
      report_metric "Alerts/NotEnoughWorkers", "Active", (info[:workers] < 50 ? 1.0 : 0.0)
      report_metric "Jobs/Pending", "Jobs", info[:pending].to_f
      report_metric "Jobs/Processed", "Jobs", info[:processed].to_f 
      report_metric "Jobs/Failed", "Jobs", info[:failed].to_f
    end
  end

  #
  # Register this agent with the component.
  # The ExampleAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :example, ExampleAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run

end
